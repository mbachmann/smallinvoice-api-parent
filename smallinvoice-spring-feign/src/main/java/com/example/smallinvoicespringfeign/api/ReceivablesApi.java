/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.smallinvoicespringfeign.api;

import com.example.smallinvoicespringfeign.model.DocumentDeliveryNoteChangeStatusPATCH;
import com.example.smallinvoicespringfeign.model.DocumentDeliveryNotePOST;
import com.example.smallinvoicespringfeign.model.DocumentDeliveryNotePUT;
import com.example.smallinvoicespringfeign.model.DocumentDeliveryNoteSendByEmailPATCH;
import com.example.smallinvoicespringfeign.model.DocumentInvoicePaymentPOST;
import com.example.smallinvoicespringfeign.model.DocumentInvoicePaymentPUT;
import com.example.smallinvoicespringfeign.model.DocumentInvoiceSendByEmailPATCH;
import com.example.smallinvoicespringfeign.model.DocumentInvoiceStandardChangeStatusPATCH;
import com.example.smallinvoicespringfeign.model.DocumentInvoiceStandardPOST;
import com.example.smallinvoicespringfeign.model.DocumentInvoiceStandardPUT;
import com.example.smallinvoicespringfeign.model.DocumentOfferChangeStatusPATCH;
import com.example.smallinvoicespringfeign.model.DocumentOfferPOST;
import com.example.smallinvoicespringfeign.model.DocumentOfferPUT;
import com.example.smallinvoicespringfeign.model.DocumentOfferSendByEmailPATCH;
import com.example.smallinvoicespringfeign.model.DocumentOrderConfirmationChangeStatusPATCH;
import com.example.smallinvoicespringfeign.model.DocumentOrderConfirmationPOST;
import com.example.smallinvoicespringfeign.model.DocumentOrderConfirmationPUT;
import com.example.smallinvoicespringfeign.model.DocumentOrderConfirmationSendByEmailPATCH;
import com.example.smallinvoicespringfeign.model.DocumentSendByPostPATCH;
import com.example.smallinvoicespringfeign.model.ItemDocumentDeliveryNoteGET;
import com.example.smallinvoicespringfeign.model.ItemDocumentInvoicePaymentGET;
import com.example.smallinvoicespringfeign.model.ItemDocumentInvoiceStandardGET;
import com.example.smallinvoicespringfeign.model.ItemDocumentOfferGET;
import com.example.smallinvoicespringfeign.model.ItemDocumentOrderConfirmationGET;
import com.example.smallinvoicespringfeign.model.ListDeliveryNotes;
import com.example.smallinvoicespringfeign.model.ListDocumentInvoicePayments;
import com.example.smallinvoicespringfeign.model.ListInvoicesStandard;
import com.example.smallinvoicespringfeign.model.ListOffers;
import com.example.smallinvoicespringfeign.model.ListOrderConfirmations;
import com.example.smallinvoicespringfeign.model.ListReceivablesConfigurationIsrs;
import com.example.smallinvoicespringfeign.model.ReceivablesConfigurationIsrGET;
import com.example.smallinvoicespringfeign.model.Response401;
import com.example.smallinvoicespringfeign.model.Response402;
import com.example.smallinvoicespringfeign.model.Response403;
import com.example.smallinvoicespringfeign.model.Response404;
import com.example.smallinvoicespringfeign.model.Response422;
import com.example.smallinvoicespringfeign.model.Response4xx;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-31T13:05:18.255013+02:00[Europe/Zurich]")
@Validated
@Api(value = "Receivables", description = "the Receivables API")
public interface ReceivablesApi {

    /**
     * PATCH /receivables/delivery-notes/{deliveryNoteId}/change-status : Changes status of specified delivery note
     * Changes status of specified delivery note
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param documentDeliveryNoteChangeStatusPATCH change status JSON data (required)
     * @return Data of the changed delivery note (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Changes status of specified delivery note", nickname = "changeDeliveryNoteStatus", notes = "Changes status of specified delivery note", response = ItemDocumentDeliveryNoteGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed delivery note", response = ItemDocumentDeliveryNoteGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}/change-status",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentDeliveryNoteGET> changeDeliveryNoteStatus(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "change status JSON data" ,required=true )  @Valid @RequestBody DocumentDeliveryNoteChangeStatusPATCH documentDeliveryNoteChangeStatusPATCH);


    /**
     * PATCH /receivables/invoices/{invoiceId}/change-status : Changes status of specified invoice
     * Changes status of specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param documentInvoiceStandardChangeStatusPATCH change status JSON data (required)
     * @return Data of the changed invoice (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Changes status of specified invoice", nickname = "changeInvoiceStatus", notes = "Changes status of specified invoice", response = ItemDocumentInvoiceStandardGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed invoice", response = ItemDocumentInvoiceStandardGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/invoices/{invoiceId}/change-status",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoiceStandardGET> changeInvoiceStatus(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "change status JSON data" ,required=true )  @Valid @RequestBody DocumentInvoiceStandardChangeStatusPATCH documentInvoiceStandardChangeStatusPATCH);


    /**
     * PATCH /receivables/offers/{offerId}/change-status : Changes status of specified offer
     * Changes status of specified offer
     *
     * @param offerId offer ID (required)
     * @param documentOfferChangeStatusPATCH change status JSON data (required)
     * @return Data of the changed offer (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Changes status of specified offer", nickname = "changeOfferStatus", notes = "Changes status of specified offer", response = ItemDocumentOfferGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed offer", response = ItemDocumentOfferGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/offers/{offerId}/change-status",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOfferGET> changeOfferStatus(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "change status JSON data" ,required=true )  @Valid @RequestBody DocumentOfferChangeStatusPATCH documentOfferChangeStatusPATCH);


    /**
     * PATCH /receivables/order-confirmations/{orderConfirmationId}/change-status : Changes status of specified order confirmation
     * Changes status of specified order confirmation
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param documentOrderConfirmationChangeStatusPATCH change status JSON data (required)
     * @return Data of the changed order confirmation (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Changes status of specified order confirmation", nickname = "changeOrderConfirmationStatus", notes = "Changes status of specified order confirmation", response = ItemDocumentOrderConfirmationGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed order confirmation", response = ItemDocumentOrderConfirmationGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}/change-status",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOrderConfirmationGET> changeOrderConfirmationStatus(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "change status JSON data" ,required=true )  @Valid @RequestBody DocumentOrderConfirmationChangeStatusPATCH documentOrderConfirmationChangeStatusPATCH);


    /**
     * POST /receivables/delivery-notes : Creates new delivery note
     * Creates new delivery note
     *
     * @param documentDeliveryNotePOST delivery note JSON data (required)
     * @return Data of the created delivery note (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or One of feature limits was reached (status code 402)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new delivery note", nickname = "createDeliveryNote", notes = "Creates new delivery note", response = ItemDocumentDeliveryNoteGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created delivery note", response = ItemDocumentDeliveryNoteGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 402, message = "One of feature limits was reached", response = Response402.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/receivables/delivery-notes",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentDeliveryNoteGET> createDeliveryNote(@ApiParam(value = "delivery note JSON data" ,required=true )  @Valid @RequestBody DocumentDeliveryNotePOST documentDeliveryNotePOST);


    /**
     * POST /receivables/invoices : Creates new invoice
     * Creates new invoice
     *
     * @param documentInvoiceStandardPOST invoice JSON data (required)
     * @return Data of the created invoice (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or One of feature limits was reached (status code 402)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new invoice", nickname = "createInvoice", notes = "Creates new invoice", response = ItemDocumentInvoiceStandardGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created invoice", response = ItemDocumentInvoiceStandardGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 402, message = "One of feature limits was reached", response = Response402.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/receivables/invoices",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoiceStandardGET> createInvoice(@ApiParam(value = "invoice JSON data" ,required=true )  @Valid @RequestBody DocumentInvoiceStandardPOST documentInvoiceStandardPOST);


    /**
     * POST /receivables/invoices/{invoiceId}/payments : Creates new payment for specified invoice
     * Creates new payment for specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param documentInvoicePaymentPOST payment JSON data (required)
     * @return Data of the created payment (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new payment for specified invoice", nickname = "createInvoicePayment", notes = "Creates new payment for specified invoice", response = ItemDocumentInvoicePaymentGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created payment", response = ItemDocumentInvoicePaymentGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/receivables/invoices/{invoiceId}/payments",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoicePaymentGET> createInvoicePayment(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "payment JSON data" ,required=true )  @Valid @RequestBody DocumentInvoicePaymentPOST documentInvoicePaymentPOST);


    /**
     * POST /receivables/offers : Creates new offer
     * Creates new offer
     *
     * @param documentOfferPOST offer JSON data (required)
     * @return Data of the created offer (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or One of feature limits was reached (status code 402)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new offer", nickname = "createOffer", notes = "Creates new offer", response = ItemDocumentOfferGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created offer", response = ItemDocumentOfferGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 402, message = "One of feature limits was reached", response = Response402.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/receivables/offers",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOfferGET> createOffer(@ApiParam(value = "offer JSON data" ,required=true )  @Valid @RequestBody DocumentOfferPOST documentOfferPOST);


    /**
     * POST /receivables/order-confirmations : Creates new order confirmation
     * Creates new order confirmation
     *
     * @param documentOrderConfirmationPOST order confirmation JSON data (required)
     * @return Data of the created order confirmation (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or One of feature limits was reached (status code 402)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new order confirmation", nickname = "createOrderConfirmation", notes = "Creates new order confirmation", response = ItemDocumentOrderConfirmationGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created order confirmation", response = ItemDocumentOrderConfirmationGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 402, message = "One of feature limits was reached", response = Response402.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/receivables/order-confirmations",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOrderConfirmationGET> createOrderConfirmation(@ApiParam(value = "order confirmation JSON data" ,required=true )  @Valid @RequestBody DocumentOrderConfirmationPOST documentOrderConfirmationPOST);


    /**
     * DELETE /receivables/delivery-notes/{deliveryNoteIds} : Deletes specified delivery notes
     * Deletes specified delivery notes
     *
     * @param deliveryNoteIds comma separated delivery note IDs (required)
     * @return Delivery notes successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified delivery notes", nickname = "deleteDeliveryNotes", notes = "Deletes specified delivery notes", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Delivery notes successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/receivables/delivery-notes/{deliveryNoteIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteDeliveryNotes(@ApiParam(value = "comma separated delivery note IDs",required=true) @PathVariable("deliveryNoteIds") Integer... deliveryNoteIds);


    /**
     * DELETE /receivables/invoices/{invoiceId}/payments/{paymentIds} : Deletes specified invoice&#39;s payments
     * Deletes specified invoice&#39;s payments
     *
     * @param invoiceId invoice ID (required)
     * @param paymentIds payment IDs (comma separated) (required)
     * @return Payments successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified invoice's payments", nickname = "deleteInvoicePayment", notes = "Deletes specified invoice's payments", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "activity", description = "Activities") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Payments successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/receivables/invoices/{invoiceId}/payments/{paymentIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteInvoicePayment(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "payment IDs (comma separated)",required=true) @PathVariable("paymentIds") Integer... paymentIds);


    /**
     * DELETE /receivables/invoices/{invoiceIds} : Deletes specified invoices
     * Deletes specified invoices
     *
     * @param invoiceIds comma separated invoice IDs (required)
     * @return Invoices successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified invoices", nickname = "deleteInvoices", notes = "Deletes specified invoices", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Invoices successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/receivables/invoices/{invoiceIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteInvoices(@ApiParam(value = "comma separated invoice IDs",required=true) @PathVariable("invoiceIds") Integer... invoiceIds);


    /**
     * DELETE /receivables/offers/{offerIds} : Deletes specified offers
     * Deletes specified offers
     *
     * @param offerIds comma separated offer IDs (required)
     * @return Offers successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified offers", nickname = "deleteOffers", notes = "Deletes specified offers", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Offers successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/receivables/offers/{offerIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteOffers(@ApiParam(value = "comma separated offer IDs",required=true) @PathVariable("offerIds") Integer... offerIds);


    /**
     * DELETE /receivables/order-confirmations/{orderConfirmationIds} : Deletes specified order confirmations
     * Deletes specified order confirmations
     *
     * @param orderConfirmationIds comma separated order confirmation IDs (required)
     * @return Order confirmations successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified order confirmations", nickname = "deleteOrderConfirmations", notes = "Deletes specified order confirmations", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Order confirmations successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/receivables/order-confirmations/{orderConfirmationIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteOrderConfirmations(@ApiParam(value = "comma separated order confirmation IDs",required=true) @PathVariable("orderConfirmationIds") Integer... orderConfirmationIds);


    /**
     * GET /receivables/delivery-notes/{deliveryNoteId} : Returns data of specified delivery note
     * Returns data of specified delivery note
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested delivery note (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified delivery note", nickname = "getDeliveryNote", notes = "Returns data of specified delivery note", response = ItemDocumentDeliveryNoteGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested delivery note", response = ItemDocumentDeliveryNoteGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentDeliveryNoteGET> getDeliveryNote(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/delivery-notes/{deliveryNoteId}/pdf : Gets pdf of specified delivery note
     * Gets pdf of specified delivery note
     *
     * @param deliveryNoteId delivery note ID (required)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets pdf of specified delivery note", nickname = "getDeliveryNotePdf", notes = "Gets pdf of specified delivery note", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}/pdf",
        produces = "application/pdf"
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeliveryNotePdf(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId);


    /**
     * GET /receivables/delivery-notes/{deliveryNoteId}/preview : Gets preview of specified delivery note
     * Gets preview of specified delivery note
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param page page number [1 .. pages amount] (optional, default to 1)
     * @param size width in pixels (optional, default to 972)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets preview of specified delivery note", nickname = "getDeliveryNotePreview", notes = "Gets preview of specified delivery note", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}/preview",
        produces = "image/png"
    )
    ResponseEntity<org.springframework.core.io.Resource> getDeliveryNotePreview(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "page number [1 .. pages amount]", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "width in pixels", allowableValues = "240, 595, 600, 972, 1240", defaultValue = "972") @Valid @RequestParam(value = "size", required = false, defaultValue="972") Integer size);


    /**
     * GET /receivables/delivery-notes : Returns list of delivery notes
     * Returns list of delivery notes
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -number)
     * @return Data of the requested delivery notes + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of delivery notes", nickname = "getDeliveryNotes", notes = "Returns list of delivery notes", response = ListDeliveryNotes.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested delivery notes + pagination", response = ListDeliveryNotes.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/delivery-notes",
        produces = "application/json"
    )
    ResponseEntity<ListDeliveryNotes> getDeliveryNotes(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-number") @Valid @RequestParam(value = "sort", required = false, defaultValue="-number") String sort);


    /**
     * GET /receivables/invoices/{invoiceId} : Returns data of specified invoice
     * Returns data of specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested invoice (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified invoice", nickname = "getInvoice", notes = "Returns data of specified invoice", response = ItemDocumentInvoiceStandardGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested invoice", response = ItemDocumentInvoiceStandardGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices/{invoiceId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoiceStandardGET> getInvoice(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/invoices/{invoiceId}/payments/{paymentId} : Returns data of specified invoice&#39;s payment
     * Returns data of specified invoice&#39;s payment
     *
     * @param invoiceId invoice ID (required)
     * @param paymentId payment ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested payment (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified invoice's payment", nickname = "getInvoicePayment", notes = "Returns data of specified invoice's payment", response = ItemDocumentInvoicePaymentGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested payment", response = ItemDocumentInvoicePaymentGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices/{invoiceId}/payments/{paymentId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoicePaymentGET> getInvoicePayment(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "payment ID",required=true) @PathVariable("paymentId") Integer paymentId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/invoices/{invoiceId}/payments : Returns list of payments for specified invoice
     * Returns list of payments for specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -date)
     * @return Data of the requested payments + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of payments for specified invoice", nickname = "getInvoicePayments", notes = "Returns list of payments for specified invoice", response = ListDocumentInvoicePayments.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested payments + pagination", response = ListDocumentInvoicePayments.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices/{invoiceId}/payments",
        produces = "application/json"
    )
    ResponseEntity<ListDocumentInvoicePayments> getInvoicePayments(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-date") @Valid @RequestParam(value = "sort", required = false, defaultValue="-date") String sort);


    /**
     * GET /receivables/invoices/{invoiceId}/pdf : Gets pdf of specified invoice
     * Gets pdf of specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param options pdf options JSON (optional)
     * @return ok (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets pdf of specified invoice", nickname = "getInvoicePdf", notes = "Gets pdf of specified invoice", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices/{invoiceId}/pdf",
        produces = "application/pdf"
    )
    ResponseEntity<org.springframework.core.io.Resource> getInvoicePdf(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "pdf options JSON") @Valid @RequestParam(value = "options", required = false) Object options);


    /**
     * GET /receivables/invoices/{invoiceId}/preview : Gets preview of specified invoice
     * Gets preview of specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param page page number [1 .. pages amount] (optional, default to 1)
     * @param size width in pixels (optional, default to 972)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets preview of specified invoice", nickname = "getInvoicePreview", notes = "Gets preview of specified invoice", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices/{invoiceId}/preview",
        produces = "image/png"
    )
    ResponseEntity<org.springframework.core.io.Resource> getInvoicePreview(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "page number [1 .. pages amount]", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "width in pixels", allowableValues = "240, 595, 600, 972, 1240", defaultValue = "972") @Valid @RequestParam(value = "size", required = false, defaultValue="972") Integer size);


    /**
     * GET /receivables/invoices : Returns list of invoices
     * Returns list of invoices
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -number)
     * @return Data of the requested invoices + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of invoices", nickname = "getInvoices", notes = "Returns list of invoices", response = ListInvoicesStandard.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested invoices + pagination", response = ListInvoicesStandard.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/invoices",
        produces = "application/json"
    )
    ResponseEntity<ListInvoicesStandard> getInvoices(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-number") @Valid @RequestParam(value = "sort", required = false, defaultValue="-number") String sort);


    /**
     * GET /receivables/configuration/isrs/{isrId} : Returns data of specified ISR
     * Returns data of specified ISR
     *
     * @param isrId ISR ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested ISR (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified ISR", nickname = "getIsr", notes = "Returns data of specified ISR", response = ReceivablesConfigurationIsrGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested ISR", response = ReceivablesConfigurationIsrGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/configuration/isrs/{isrId}",
        produces = "application/json"
    )
    ResponseEntity<ReceivablesConfigurationIsrGET> getIsr(@ApiParam(value = "ISR ID",required=true) @PathVariable("isrId") Integer isrId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/configuration/isrs : Returns list of ISRs
     * Returns list of ISRs
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to delivery_number)
     * @return Data of the requested ISRs + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of ISRs", nickname = "getIsrs", notes = "Returns list of ISRs", response = ListReceivablesConfigurationIsrs.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested ISRs + pagination", response = ListReceivablesConfigurationIsrs.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/configuration/isrs",
        produces = "application/json"
    )
    ResponseEntity<ListReceivablesConfigurationIsrs> getIsrs(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "delivery_number") @Valid @RequestParam(value = "sort", required = false, defaultValue="delivery_number") String sort);


    /**
     * GET /receivables/offers/{offerId} : Returns data of specified offer
     * Returns data of specified offer
     *
     * @param offerId offer ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested offer (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified offer", nickname = "getOffer", notes = "Returns data of specified offer", response = ItemDocumentOfferGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested offer", response = ItemDocumentOfferGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/offers/{offerId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOfferGET> getOffer(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/offers/{offerId}/pdf : Gets pdf of specified offer
     * Gets pdf of specified offer
     *
     * @param offerId offer ID (required)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets pdf of specified offer", nickname = "getOfferPdf", notes = "Gets pdf of specified offer", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/offers/{offerId}/pdf",
        produces = "application/pdf"
    )
    ResponseEntity<org.springframework.core.io.Resource> getOfferPdf(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId);


    /**
     * GET /receivables/offers/{offerId}/preview : Gets preview of specified offer
     * Gets preview of specified offer
     *
     * @param offerId offer ID (required)
     * @param page page number [1 .. pages amount] (optional, default to 1)
     * @param size width in pixels (optional, default to 972)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets preview of specified offer", nickname = "getOfferPreview", notes = "Gets preview of specified offer", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/offers/{offerId}/preview",
        produces = "image/png"
    )
    ResponseEntity<org.springframework.core.io.Resource> getOfferPreview(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "page number [1 .. pages amount]", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "width in pixels", allowableValues = "240, 595, 600, 972, 1240", defaultValue = "972") @Valid @RequestParam(value = "size", required = false, defaultValue="972") Integer size);


    /**
     * GET /receivables/offers : Returns list of offers
     * Returns list of offers
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -number)
     * @return Data of the requested offers + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of offers", nickname = "getOffers", notes = "Returns list of offers", response = ListOffers.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested offers + pagination", response = ListOffers.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/offers",
        produces = "application/json"
    )
    ResponseEntity<ListOffers> getOffers(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-number") @Valid @RequestParam(value = "sort", required = false, defaultValue="-number") String sort);


    /**
     * GET /receivables/order-confirmations/{orderConfirmationId} : Returns data of specified order confirmation
     * Returns data of specified order confirmation
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested order confirmation (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified order confirmation", nickname = "getOrderConfirmation", notes = "Returns data of specified order confirmation", response = ItemDocumentOrderConfirmationGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested order confirmation", response = ItemDocumentOrderConfirmationGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOrderConfirmationGET> getOrderConfirmation(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /receivables/order-confirmations/{orderConfirmationId}/pdf : Gets pdf of specified order confirmation
     * Gets pdf of specified order confirmation
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets pdf of specified order confirmation", nickname = "getOrderConfirmationPdf", notes = "Gets pdf of specified order confirmation", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}/pdf",
        produces = "application/pdf"
    )
    ResponseEntity<org.springframework.core.io.Resource> getOrderConfirmationPdf(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId);


    /**
     * GET /receivables/order-confirmations/{orderConfirmationId}/preview : Gets preview of specified order confirmation
     * Gets preview of specified order confirmation
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param page page number [1 .. pages amount] (optional, default to 1)
     * @param size width in pixels (optional, default to 972)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets preview of specified order confirmation", nickname = "getOrderConfirmationPreview", notes = "Gets preview of specified order confirmation", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}/preview",
        produces = "image/png"
    )
    ResponseEntity<org.springframework.core.io.Resource> getOrderConfirmationPreview(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "page number [1 .. pages amount]", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "width in pixels", allowableValues = "240, 595, 600, 972, 1240", defaultValue = "972") @Valid @RequestParam(value = "size", required = false, defaultValue="972") Integer size);


    /**
     * GET /receivables/order-confirmations : Returns list of order confirmations
     * Returns list of order confirmations
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -number)
     * @return Data of the requested order confirmations + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of order confirmations", nickname = "getOrderConfirmations", notes = "Returns list of order confirmations", response = ListOrderConfirmations.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested order confirmations + pagination", response = ListOrderConfirmations.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/receivables/order-confirmations",
        produces = "application/json"
    )
    ResponseEntity<ListOrderConfirmations> getOrderConfirmations(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-number") @Valid @RequestParam(value = "sort", required = false, defaultValue="-number") String sort);


    /**
     * PATCH /receivables/delivery-notes/{deliveryNoteId}/send-by-email : Sends specified delivery note by email
     * Sends specified delivery note by email
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param documentDeliveryNoteSendByEmailPATCH sending JSON data (required)
     * @return Delivery note successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified delivery note by email", nickname = "sendDeliveryNoteByEMail", notes = "Sends specified delivery note by email", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Delivery note successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}/send-by-email",
        produces = "application/json"
    )
    ResponseEntity<Void> sendDeliveryNoteByEMail(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentDeliveryNoteSendByEmailPATCH documentDeliveryNoteSendByEmailPATCH);


    /**
     * PATCH /receivables/delivery-notes/{deliveryNoteId}/send-by-post : Sends specified delivery note by post
     * Sends specified delivery note by post
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param documentSendByPostPATCH sending JSON data (required)
     * @return Delivery note successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified delivery note by post", nickname = "sendDeliveryNoteByPost", notes = "Sends specified delivery note by post", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Delivery note successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}/send-by-post",
        produces = "application/json"
    )
    ResponseEntity<Void> sendDeliveryNoteByPost(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentSendByPostPATCH documentSendByPostPATCH);


    /**
     * PATCH /receivables/invoices/{invoiceId}/send-by-email : Sends specified invoice by email
     * Sends specified invoice by email
     *
     * @param invoiceId invoice ID (required)
     * @param documentInvoiceSendByEmailPATCH sending JSON data (required)
     * @return Invoice successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified invoice by email", nickname = "sendInvoiceByEMail", notes = "Sends specified invoice by email", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Invoice successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/invoices/{invoiceId}/send-by-email",
        produces = "application/json"
    )
    ResponseEntity<Void> sendInvoiceByEMail(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentInvoiceSendByEmailPATCH documentInvoiceSendByEmailPATCH);


    /**
     * PATCH /receivables/invoices/{invoiceId}/send-by-post : Sends specified invoice by post
     * Sends specified invoice by post
     *
     * @param invoiceId invoice ID (required)
     * @param documentSendByPostPATCH sending JSON data (required)
     * @return Invoice successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified invoice by post", nickname = "sendInvoiceByPost", notes = "Sends specified invoice by post", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Invoice successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/invoices/{invoiceId}/send-by-post",
        produces = "application/json"
    )
    ResponseEntity<Void> sendInvoiceByPost(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentSendByPostPATCH documentSendByPostPATCH);


    /**
     * PATCH /receivables/offers/{offerId}/send-by-email : Sends specified offer by email
     * Sends specified offer by email
     *
     * @param offerId offer ID (required)
     * @param documentOfferSendByEmailPATCH sending JSON data (required)
     * @return Offer successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified offer by email", nickname = "sendOfferByEMail", notes = "Sends specified offer by email", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Offer successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/offers/{offerId}/send-by-email",
        produces = "application/json"
    )
    ResponseEntity<Void> sendOfferByEMail(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentOfferSendByEmailPATCH documentOfferSendByEmailPATCH);


    /**
     * PATCH /receivables/offers/{offerId}/send-by-post : Sends specified offer by post
     * Sends specified offer by post
     *
     * @param offerId offer ID (required)
     * @param documentSendByPostPATCH sending JSON data (required)
     * @return Offer successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified offer by post", nickname = "sendOfferByPost", notes = "Sends specified offer by post", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Offer successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/offers/{offerId}/send-by-post",
        produces = "application/json"
    )
    ResponseEntity<Void> sendOfferByPost(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentSendByPostPATCH documentSendByPostPATCH);


    /**
     * PATCH /receivables/order-confirmations/{orderConfirmationId}/send-by-email : Sends specified order confirmation by email
     * Sends specified order confirmation by email
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param documentOrderConfirmationSendByEmailPATCH sending JSON data (required)
     * @return Order confirmation successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified order confirmation by email", nickname = "sendOrderConfirmationByEMail", notes = "Sends specified order confirmation by email", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Order confirmation successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}/send-by-email",
        produces = "application/json"
    )
    ResponseEntity<Void> sendOrderConfirmationByEMail(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentOrderConfirmationSendByEmailPATCH documentOrderConfirmationSendByEmailPATCH);


    /**
     * PATCH /receivables/order-confirmations/{orderConfirmationId}/send-by-post : Sends specified order confirmation by post
     * Sends specified order confirmation by post
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param documentSendByPostPATCH sending JSON data (required)
     * @return Order confirmation successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified order confirmation by post", nickname = "sendOrderConfirmationByPost", notes = "Sends specified order confirmation by post", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Order confirmation successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}/send-by-post",
        produces = "application/json"
    )
    ResponseEntity<Void> sendOrderConfirmationByPost(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentSendByPostPATCH documentSendByPostPATCH);


    /**
     * PUT /receivables/delivery-notes/{deliveryNoteId} : Updates specified delivery note
     * Updates specified delivery note
     *
     * @param deliveryNoteId delivery note ID (required)
     * @param documentDeliveryNotePUT delivery note JSON data (required)
     * @return Data of the updated delivery note (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified delivery note", nickname = "updateDeliveryNote", notes = "Updates specified delivery note", response = ItemDocumentDeliveryNoteGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "delivery_note", description = "Delivery notes") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated delivery note", response = ItemDocumentDeliveryNoteGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/receivables/delivery-notes/{deliveryNoteId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentDeliveryNoteGET> updateDeliveryNote(@ApiParam(value = "delivery note ID",required=true) @PathVariable("deliveryNoteId") Integer deliveryNoteId,@ApiParam(value = "delivery note JSON data" ,required=true )  @Valid @RequestBody DocumentDeliveryNotePUT documentDeliveryNotePUT);


    /**
     * PUT /receivables/invoices/{invoiceId} : Updates specified invoice
     * Updates specified invoice
     *
     * @param invoiceId invoice ID (required)
     * @param documentInvoiceStandardPUT invoice JSON data (required)
     * @return Data of the updated invoice (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified invoice", nickname = "updateInvoice", notes = "Updates specified invoice", response = ItemDocumentInvoiceStandardGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated invoice", response = ItemDocumentInvoiceStandardGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/receivables/invoices/{invoiceId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoiceStandardGET> updateInvoice(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "invoice JSON data" ,required=true )  @Valid @RequestBody DocumentInvoiceStandardPUT documentInvoiceStandardPUT);


    /**
     * PUT /receivables/invoices/{invoiceId}/payments/{paymentId} : Updates specified invoice&#39;s payment
     * Updates specified invoice&#39;s payment
     *
     * @param invoiceId invoice ID (required)
     * @param paymentId payment ID (required)
     * @param documentInvoicePaymentPUT payment JSON data (required)
     * @return Data of the updated payment (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified invoice's payment", nickname = "updateInvoicePayment", notes = "Updates specified invoice's payment", response = ItemDocumentInvoicePaymentGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "invoice", description = "Invoices") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated payment", response = ItemDocumentInvoicePaymentGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/receivables/invoices/{invoiceId}/payments/{paymentId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentInvoicePaymentGET> updateInvoicePayment(@ApiParam(value = "invoice ID",required=true) @PathVariable("invoiceId") Integer invoiceId,@ApiParam(value = "payment ID",required=true) @PathVariable("paymentId") Integer paymentId,@ApiParam(value = "payment JSON data" ,required=true )  @Valid @RequestBody DocumentInvoicePaymentPUT documentInvoicePaymentPUT);


    /**
     * PUT /receivables/offers/{offerId} : Updates specified offer
     * Updates specified offer
     *
     * @param offerId offer ID (required)
     * @param documentOfferPUT offer JSON data (required)
     * @return Data of the updated offer (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified offer", nickname = "updateOffer", notes = "Updates specified offer", response = ItemDocumentOfferGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "offer", description = "Offers") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated offer", response = ItemDocumentOfferGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/receivables/offers/{offerId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOfferGET> updateOffer(@ApiParam(value = "offer ID",required=true) @PathVariable("offerId") Integer offerId,@ApiParam(value = "offer JSON data" ,required=true )  @Valid @RequestBody DocumentOfferPUT documentOfferPUT);


    /**
     * PUT /receivables/order-confirmations/{orderConfirmationId} : Updates specified order confirmation
     * Updates specified order confirmation
     *
     * @param orderConfirmationId order confirmation ID (required)
     * @param documentOrderConfirmationPUT order confirmation JSON data (required)
     * @return Data of the updated order confirmation (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified order confirmation", nickname = "updateOrderConfirmation", notes = "Updates specified order confirmation", response = ItemDocumentOrderConfirmationGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "order_confirmation", description = "Order confirmations") })
         }, tags={ "Receivables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated order confirmation", response = ItemDocumentOrderConfirmationGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/receivables/order-confirmations/{orderConfirmationId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentOrderConfirmationGET> updateOrderConfirmation(@ApiParam(value = "order confirmation ID",required=true) @PathVariable("orderConfirmationId") Integer orderConfirmationId,@ApiParam(value = "order confirmation JSON data" ,required=true )  @Valid @RequestBody DocumentOrderConfirmationPUT documentOrderConfirmationPUT);

}
