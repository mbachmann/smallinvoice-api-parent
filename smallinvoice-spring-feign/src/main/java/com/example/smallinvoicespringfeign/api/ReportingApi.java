/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.smallinvoicespringfeign.api;

import com.example.smallinvoicespringfeign.model.ItemActivityGET;
import com.example.smallinvoicespringfeign.model.ItemReportingCostUnitGET;
import com.example.smallinvoicespringfeign.model.ItemReportingEffortGET;
import com.example.smallinvoicespringfeign.model.ItemReportingProjectGET;
import com.example.smallinvoicespringfeign.model.ItemWorkingHoursGET;
import com.example.smallinvoicespringfeign.model.ListReportingActivities;
import com.example.smallinvoicespringfeign.model.ListReportingCostUnits;
import com.example.smallinvoicespringfeign.model.ListReportingEfforts;
import com.example.smallinvoicespringfeign.model.ListReportingProjects;
import com.example.smallinvoicespringfeign.model.ListWorkingHours;
import com.example.smallinvoicespringfeign.model.ReportingCostUnitPOST;
import com.example.smallinvoicespringfeign.model.ReportingCostUnitPUT;
import com.example.smallinvoicespringfeign.model.ReportingEffortPOST;
import com.example.smallinvoicespringfeign.model.ReportingEffortPUT;
import com.example.smallinvoicespringfeign.model.ReportingProjectPOST;
import com.example.smallinvoicespringfeign.model.ReportingProjectPUT;
import com.example.smallinvoicespringfeign.model.Response401;
import com.example.smallinvoicespringfeign.model.Response403;
import com.example.smallinvoicespringfeign.model.Response404;
import com.example.smallinvoicespringfeign.model.Response422;
import com.example.smallinvoicespringfeign.model.Response4xx;
import com.example.smallinvoicespringfeign.model.WorkingHoursPOST;
import com.example.smallinvoicespringfeign.model.WorkingHoursPUT;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-03T21:09:37.732+02:00[Europe/Zurich]")
@Validated
@Api(value = "Reporting", description = "the Reporting API")
public interface ReportingApi {

    /**
     * PATCH /reporting/projects/{projectId}/change-status/{status} : Updates status for specified project
     * Updates status for specified project
     *
     * @param projectId project ID (required)
     * @param status status to be set, on of: * &#39;O&#39; - open * &#39;C&#39; - closed * &#39;B&#39; - billed * &#39;P&#39; - pending  (required)
     * @return Data of the changed project (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates status for specified project", nickname = "changeProjectStatus", notes = "Updates status for specified project", response = ItemReportingProjectGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed project", response = ItemReportingProjectGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/reporting/projects/{projectId}/change-status/{status}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingProjectGET> changeProjectStatus(@ApiParam(value = "project ID",required=true) @PathVariable("projectId") Integer projectId,@ApiParam(value = "status to be set, on of: * 'O' - open * 'C' - closed * 'B' - billed * 'P' - pending ",required=true, allowableValues = "\"O\", \"C\", \"B\", \"P\"") @PathVariable("status") String status);


    /**
     * POST /reporting/cost-units : Creates new cost unit
     * Creates new cost unit
     *
     * @param reportingCostUnitPOST cost unit JSON data (required)
     * @return Data of the created cost unit (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new cost unit", nickname = "createCostUnit", notes = "Creates new cost unit", response = ItemReportingCostUnitGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "cost_unit", description = "Cost units") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created cost unit", response = ItemReportingCostUnitGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/reporting/cost-units",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingCostUnitGET> createCostUnit(@ApiParam(value = "cost unit JSON data" ,required=true )  @Valid @RequestBody ReportingCostUnitPOST reportingCostUnitPOST);


    /**
     * POST /reporting/efforts : Creates new effort
     * Creates new effort
     *
     * @param reportingEffortPOST effort JSON data (required)
     * @return Data of the created effort (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new effort", nickname = "createEffort", notes = "Creates new effort", response = ItemReportingEffortGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "effort", description = "Efforts") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created effort", response = ItemReportingEffortGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/reporting/efforts",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingEffortGET> createEffort(@ApiParam(value = "effort JSON data" ,required=true )  @Valid @RequestBody ReportingEffortPOST reportingEffortPOST);


    /**
     * POST /reporting/projects : Creates new project
     * Creates new project
     *
     * @param reportingProjectPOST project JSON data (required)
     * @return Data of the created project (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new project", nickname = "createProject", notes = "Creates new project", response = ItemReportingProjectGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created project", response = ItemReportingProjectGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/reporting/projects",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingProjectGET> createProject(@ApiParam(value = "project JSON data" ,required=true )  @Valid @RequestBody ReportingProjectPOST reportingProjectPOST);


    /**
     * POST /reporting/working-hours : Creates new working hours entry
     * Creates new working hours entry
     *
     * @param workingHoursPOST working hours JSON data (required)
     * @return Data of the created working hours entry (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new working hours entry", nickname = "createWorkingHour", notes = "Creates new working hours entry", response = ItemWorkingHoursGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "working_hours", description = "Working hours") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created working hours entry", response = ItemWorkingHoursGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/reporting/working-hours",
        produces = "application/json"
    )
    ResponseEntity<ItemWorkingHoursGET> createWorkingHour(@ApiParam(value = "working hours JSON data" ,required=true )  @Valid @RequestBody WorkingHoursPOST workingHoursPOST);


    /**
     * DELETE /reporting/cost-units/{costUnitsIds} : Deletes specified cost units
     * Deletes specified cost units
     *
     * @param costUnitsIds comma separated cost unit IDs (required)
     * @return cost units successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified cost units", nickname = "deleteCostUnits", notes = "Deletes specified cost units", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "cost_unit", description = "Cost units") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "cost units successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/reporting/cost-units/{costUnitsIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCostUnits(@ApiParam(value = "comma separated cost unit IDs",required=true) @PathVariable("costUnitsIds") Integer... costUnitsIds);


    /**
     * DELETE /reporting/efforts/{effortIds} : Deletes specified efforts
     * Deletes specified efforts
     *
     * @param effortIds efforts IDs (comma separated) (required)
     * @return Effort successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified efforts", nickname = "deleteEfforts", notes = "Deletes specified efforts", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "effort", description = "Efforts") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Effort successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/reporting/efforts/{effortIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteEfforts(@ApiParam(value = "efforts IDs (comma separated)",required=true) @PathVariable("effortIds") Integer... effortIds);


    /**
     * DELETE /reporting/projects/{projectIds} : Deletes specified projects
     * Deletes specified projects
     *
     * @param projectIds projects IDs (comma separated) (required)
     * @return Project successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified projects", nickname = "deleteProjects", notes = "Deletes specified projects", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Project successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/reporting/projects/{projectIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteProjects(@ApiParam(value = "projects IDs (comma separated)",required=true) @PathVariable("projectIds") Integer... projectIds);


    /**
     * DELETE /reporting/working-hours/{timeIds} : Deletes specified working hours entries
     * Deletes specified working hours entries
     *
     * @param timeIds working hours IDs (comma separated) (required)
     * @return Working hours entries successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified working hours entries", nickname = "deleteWorkingHours", notes = "Deletes specified working hours entries", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "working_hours", description = "Working hours") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Working hours entries successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/reporting/working-hours/{timeIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteWorkingHours(@ApiParam(value = "working hours IDs (comma separated)",required=true) @PathVariable("timeIds") String... timeIds);


    /**
     * GET /reporting/activities : Returns list of activities entries
     * Returns list of activities entries
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested activities entries + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of activities entries", nickname = "getActivities", notes = "Returns list of activities entries", response = ListReportingActivities.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "activity", description = "Activities") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested activities entries + pagination", response = ListReportingActivities.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/activities",
        produces = "application/json"
    )
    ResponseEntity<ListReportingActivities> getActivities(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /reporting/activities/{activityId} : Returns data of specified activity entry
     * Returns data of specified activity entry
     *
     * @param activityId activity ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested activity entry (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified activity entry", nickname = "getActivity", notes = "Returns data of specified activity entry", response = ItemActivityGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "activity", description = "Activities") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested activity entry", response = ItemActivityGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/activities/{activityId}",
        produces = "application/json"
    )
    ResponseEntity<ItemActivityGET> getActivity(@ApiParam(value = "activity ID",required=true) @PathVariable("activityId") Integer activityId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /reporting/cost-units/{costUnitId} : Returns data of specified cost unit
     * Returns data of specified cost unit
     *
     * @param costUnitId cost unit ID (required)
     * @return Data of the requested cost unit (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified cost unit", nickname = "getCostUnit", notes = "Returns data of specified cost unit", response = ItemReportingCostUnitGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "cost_unit", description = "Cost units") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested cost unit", response = ItemReportingCostUnitGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/cost-units/{costUnitId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingCostUnitGET> getCostUnit(@ApiParam(value = "cost unit ID",required=true) @PathVariable("costUnitId") Integer costUnitId);


    /**
     * GET /reporting/cost-units : Returns list of cost units
     * Returns list of cost units
     *
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested cost units + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of cost units", nickname = "getCostUnits", notes = "Returns list of cost units", response = ListReportingCostUnits.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "cost_unit", description = "Cost units") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested cost units + pagination", response = ListReportingCostUnits.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/cost-units",
        produces = "application/json"
    )
    ResponseEntity<ListReportingCostUnits> getCostUnits(@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /reporting/efforts/{effortId} : Returns data of specified effort
     * Returns data of specified effort
     *
     * @param effortId effort ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested effort (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified effort", nickname = "getEffort", notes = "Returns data of specified effort", response = ItemReportingEffortGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "effort", description = "Efforts") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested effort", response = ItemReportingEffortGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/efforts/{effortId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingEffortGET> getEffort(@ApiParam(value = "effort ID",required=true) @PathVariable("effortId") Integer effortId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /reporting/efforts : Returns list of efforts
     * Returns list of efforts
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -date,-duration)
     * @return Data of the requested efforts + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of efforts", nickname = "getEfforts", notes = "Returns list of efforts", response = ListReportingEfforts.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "effort", description = "Efforts") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested efforts + pagination", response = ListReportingEfforts.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/efforts",
        produces = "application/json"
    )
    ResponseEntity<ListReportingEfforts> getEfforts(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-date,-duration") @Valid @RequestParam(value = "sort", required = false, defaultValue="-date,-duration") String sort);


    /**
     * GET /reporting/projects/{projectId} : Returns data of specified project
     * Returns data of specified project
     *
     * @param projectId project ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested project (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified project", nickname = "getProject", notes = "Returns data of specified project", response = ItemReportingProjectGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested project", response = ItemReportingProjectGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/projects/{projectId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingProjectGET> getProject(@ApiParam(value = "project ID",required=true) @PathVariable("projectId") Integer projectId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /reporting/projects : Returns list of projects
     * Returns list of projects
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested projects + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of projects", nickname = "getProjects", notes = "Returns list of projects", response = ListReportingProjects.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested projects + pagination", response = ListReportingProjects.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/projects",
        produces = "application/json"
    )
    ResponseEntity<ListReportingProjects> getProjects(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /reporting/working-hours/{timeId} : Returns data of specified working hours entry
     * Returns data of specified working hours entry
     *
     * @param timeId working hours ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested working hours entry (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified working hours entry", nickname = "getWorkingHour", notes = "Returns data of specified working hours entry", response = ItemWorkingHoursGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "working_hours", description = "Working hours") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested working hours entry", response = ItemWorkingHoursGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/working-hours/{timeId}",
        produces = "application/json"
    )
    ResponseEntity<ItemWorkingHoursGET> getWorkingHour(@ApiParam(value = "working hours ID",required=true) @PathVariable("timeId") Integer timeId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /reporting/working-hours : Returns list of working hours entries
     * Returns list of working hours entries
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to -date,-time_start)
     * @return Data of the requested working hours entries + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of working hours entries", nickname = "getWorkingHours", notes = "Returns list of working hours entries", response = ListWorkingHours.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "working_hours", description = "Working hours") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested working hours entries + pagination", response = ListWorkingHours.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/reporting/working-hours",
        produces = "application/json"
    )
    ResponseEntity<ListWorkingHours> getWorkingHours(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "-date,-time_start") @Valid @RequestParam(value = "sort", required = false, defaultValue="-date,-time_start") String sort);


    /**
     * PUT /reporting/cost-units/{costUnitId} : Updates specified cost unit
     * Updates specified cost unit
     *
     * @param costUnitId cost unit ID (required)
     * @param reportingCostUnitPUT cost unit JSON data (required)
     * @return Data of the updated cost unit (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified cost unit", nickname = "updateCostUnit", notes = "Updates specified cost unit", response = ItemReportingCostUnitGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "cost_unit", description = "Cost units") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated cost unit", response = ItemReportingCostUnitGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/reporting/cost-units/{costUnitId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingCostUnitGET> updateCostUnit(@ApiParam(value = "cost unit ID",required=true) @PathVariable("costUnitId") Integer costUnitId,@ApiParam(value = "cost unit JSON data" ,required=true )  @Valid @RequestBody ReportingCostUnitPUT reportingCostUnitPUT);


    /**
     * PUT /reporting/efforts/{effortId} : Updates specified effort
     * Updates specified effort
     *
     * @param effortId effort ID (required)
     * @param reportingEffortPUT effort JSON data (required)
     * @return Data of the updated effort (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified effort", nickname = "updateEffort", notes = "Updates specified effort", response = ItemReportingEffortGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "effort", description = "Efforts") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated effort", response = ItemReportingEffortGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/reporting/efforts/{effortId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingEffortGET> updateEffort(@ApiParam(value = "effort ID",required=true) @PathVariable("effortId") Integer effortId,@ApiParam(value = "effort JSON data" ,required=true )  @Valid @RequestBody ReportingEffortPUT reportingEffortPUT);


    /**
     * PUT /reporting/projects/{projectId} : Updates specified project
     * Updates specified project
     *
     * @param projectId project ID (required)
     * @param reportingProjectPUT project JSON data (required)
     * @return Data of the updated project (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified project", nickname = "updateProject", notes = "Updates specified project", response = ItemReportingProjectGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "project", description = "Projects") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated project", response = ItemReportingProjectGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/reporting/projects/{projectId}",
        produces = "application/json"
    )
    ResponseEntity<ItemReportingProjectGET> updateProject(@ApiParam(value = "project ID",required=true) @PathVariable("projectId") Integer projectId,@ApiParam(value = "project JSON data" ,required=true )  @Valid @RequestBody ReportingProjectPUT reportingProjectPUT);


    /**
     * PUT /reporting/working-hours/{timeId} : Updates specified working hours entry
     * Updates specified working hours entry
     *
     * @param timeId working hours ID (required)
     * @param workingHoursPUT working hours JSON data (required)
     * @return Data of the updated working hours entry (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified working hours entry", nickname = "updateWorkingHour", notes = "Updates specified working hours entry", response = ItemWorkingHoursGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "working_hours", description = "Working hours") })
         }, tags={ "Reporting", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated working hours entry", response = ItemWorkingHoursGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/reporting/working-hours/{timeId}",
        produces = "application/json"
    )
    ResponseEntity<ItemWorkingHoursGET> updateWorkingHour(@ApiParam(value = "working hours ID",required=true) @PathVariable("timeId") Integer timeId,@ApiParam(value = "working hours JSON data" ,required=true )  @Valid @RequestBody WorkingHoursPUT workingHoursPUT);

}
