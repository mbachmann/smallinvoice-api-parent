/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.smallinvoicespringfeign.api;

import com.example.smallinvoicespringfeign.model.ConfigurationBankAccountPOST;
import com.example.smallinvoicespringfeign.model.ConfigurationBankAccountPUT;
import com.example.smallinvoicespringfeign.model.ConfigurationExchangeRatePOST;
import com.example.smallinvoicespringfeign.model.ConfigurationExchangeRatePUT;
import com.example.smallinvoicespringfeign.model.ItemConfigurationBankAccountGET;
import com.example.smallinvoicespringfeign.model.ItemConfigurationExchangeRateGET;
import com.example.smallinvoicespringfeign.model.ListConfigurationBankAccounts;
import com.example.smallinvoicespringfeign.model.ListConfigurationExchangeRates;
import com.example.smallinvoicespringfeign.model.Response401;
import com.example.smallinvoicespringfeign.model.Response403;
import com.example.smallinvoicespringfeign.model.Response404;
import com.example.smallinvoicespringfeign.model.Response422;
import com.example.smallinvoicespringfeign.model.Response4xx;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-28T19:49:25.792053+02:00[Europe/Zurich]")
@Validated
@Api(value = "Configuration", description = "the Configuration API")
public interface ConfigurationApi {

    /**
     * POST /configuration/bank-accounts : Creates new bank account
     * Creates new bank account
     *
     * @param configurationBankAccountPOST account JSON data (required)
     * @return Data of the created bank account (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new bank account", nickname = "createBankAccount", notes = "Creates new bank account", response = ItemConfigurationBankAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created bank account", response = ItemConfigurationBankAccountGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/configuration/bank-accounts",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationBankAccountGET> createBankAccount(@ApiParam(value = "account JSON data" ,required=true )  @Valid @RequestBody ConfigurationBankAccountPOST configurationBankAccountPOST);


    /**
     * POST /configuration/exchange-rates : Creates new currency exchange rate
     * Creates new currency exchange rate
     *
     * @param configurationExchangeRatePOST currency exchange rate JSON data (required)
     * @return Data of the created currency exchange (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new currency exchange rate", nickname = "createCurrencyExchangeRate", notes = "Creates new currency exchange rate", response = ItemConfigurationExchangeRateGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created currency exchange", response = ItemConfigurationExchangeRateGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/configuration/exchange-rates",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationExchangeRateGET> createCurrencyExchangeRate(@ApiParam(value = "currency exchange rate JSON data" ,required=true )  @Valid @RequestBody ConfigurationExchangeRatePOST configurationExchangeRatePOST);


    /**
     * DELETE /configuration/bank-accounts/{accountsIds} : Deletes specified bank accounts
     * Deletes specified bank accounts
     *
     * @param accountsIds comma separated IDs of accounts to be deleted (required)
     * @return Accounts successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified bank accounts", nickname = "deleteBankAccount", notes = "Deletes specified bank accounts", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Accounts successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/configuration/bank-accounts/{accountsIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteBankAccount(@ApiParam(value = "comma separated IDs of accounts to be deleted",required=true) @PathVariable("accountsIds") Integer... accountsIds);


    /**
     * DELETE /configuration/exchange-rates/{exchangeIds} : Deletes specified currency exchange rates
     * Deletes specified currency exchange rates
     *
     * @param exchangeIds comma separated IDs of currency exchange rates to be deleted (required)
     * @return Exchange rates successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified currency exchange rates", nickname = "deleteCurrencyExchangeRates", notes = "Deletes specified currency exchange rates", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Exchange rates successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/configuration/exchange-rates/{exchangeIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCurrencyExchangeRates(@ApiParam(value = "comma separated IDs of currency exchange rates to be deleted",required=true) @PathVariable("exchangeIds") Integer exchangeIds);


    /**
     * GET /configuration/bank-accounts/{accountId} : Returns data of specified bank account
     * Returns data of specified bank account
     *
     * @param accountId account ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested bank account (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified bank account", nickname = "getBankAccount", notes = "Returns data of specified bank account", response = ItemConfigurationBankAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested bank account", response = ItemConfigurationBankAccountGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/configuration/bank-accounts/{accountId}",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationBankAccountGET> getBankAccount(@ApiParam(value = "account ID",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /configuration/bank-accounts : Returns list of bank accounts
     * Returns list of bank accounts
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to id)
     * @return Data of the requested bank accounts + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of bank accounts", nickname = "getBankAccounts", notes = "Returns list of bank accounts", response = ListConfigurationBankAccounts.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested bank accounts + pagination", response = ListConfigurationBankAccounts.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/configuration/bank-accounts",
        produces = "application/json"
    )
    ResponseEntity<ListConfigurationBankAccounts> getBankAccounts(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "id") @Valid @RequestParam(value = "sort", required = false, defaultValue="id") String sort);


    /**
     * GET /configuration/exchange-rates/{exchangeId} : Returns data of specified currency exchange rate
     * Returns data of specified currency exchange rate
     *
     * @param exchangeId exchange ID (required)
     * @return Data of the requested currency exchange rate (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified currency exchange rate", nickname = "getCurrencyExchangeRate", notes = "Returns data of specified currency exchange rate", response = ItemConfigurationExchangeRateGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested currency exchange rate", response = ItemConfigurationExchangeRateGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/configuration/exchange-rates/{exchangeId}",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationExchangeRateGET> getCurrencyExchangeRate(@ApiParam(value = "exchange ID",required=true) @PathVariable("exchangeId") Integer exchangeId);


    /**
     * GET /configuration/exchange-rates : Returns list of currency exchange rates
     * Returns list of currency exchange rates
     *
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to currency_from,currency_to)
     * @return Data of the requested exchange rates + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of currency exchange rates", nickname = "getCurrencyExchangeRates", notes = "Returns list of currency exchange rates", response = ListConfigurationExchangeRates.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested exchange rates + pagination", response = ListConfigurationExchangeRates.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/configuration/exchange-rates",
        produces = "application/json"
    )
    ResponseEntity<ListConfigurationExchangeRates> getCurrencyExchangeRates(@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "currency_from,currency_to") @Valid @RequestParam(value = "sort", required = false, defaultValue="currency_from,currency_to") String sort);


    /**
     * PUT /configuration/bank-accounts/{accountId} : Updates specified bank account
     * Updates specified bank account
     *
     * @param accountId account ID (required)
     * @param configurationBankAccountPUT account JSON data (required)
     * @return Data of the updated bank account (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified bank account", nickname = "updateBankAccount", notes = "Updates specified bank account", response = ItemConfigurationBankAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated bank account", response = ItemConfigurationBankAccountGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/configuration/bank-accounts/{accountId}",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationBankAccountGET> updateBankAccount(@ApiParam(value = "account ID",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "account JSON data" ,required=true )  @Valid @RequestBody ConfigurationBankAccountPUT configurationBankAccountPUT);


    /**
     * PUT /configuration/exchange-rates/{exchangeId} : Updates specified currency exchange rate
     * Updates specified currency exchange rate
     *
     * @param exchangeId exchange rate ID (required)
     * @param configurationExchangeRatePUT currency exchange rate JSON data (required)
     * @return Data of the updated currency exchange rate (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified currency exchange rate", nickname = "updateCurrencyExchangeRate", notes = "Updates specified currency exchange rate", response = ItemConfigurationExchangeRateGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "configuration", description = "Settings") })
         }, tags={ "Configuration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated currency exchange rate", response = ItemConfigurationExchangeRateGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/configuration/exchange-rates/{exchangeId}",
        produces = "application/json"
    )
    ResponseEntity<ItemConfigurationExchangeRateGET> updateCurrencyExchangeRate(@ApiParam(value = "exchange rate ID",required=true) @PathVariable("exchangeId") Integer exchangeId,@ApiParam(value = "currency exchange rate JSON data" ,required=true )  @Valid @RequestBody ConfigurationExchangeRatePUT configurationExchangeRatePUT);

}
