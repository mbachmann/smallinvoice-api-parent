/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.smallinvoicespringfeign.api;

import com.example.smallinvoicespringfeign.model.ContactAccountPOST;
import com.example.smallinvoicespringfeign.model.ContactAccountPUT;
import com.example.smallinvoicespringfeign.model.ContactAddressPOST;
import com.example.smallinvoicespringfeign.model.ContactAddressPUT;
import com.example.smallinvoicespringfeign.model.ContactConfigurationGroupPOST;
import com.example.smallinvoicespringfeign.model.ContactConfigurationGroupPUT;
import com.example.smallinvoicespringfeign.model.ContactPOST;
import com.example.smallinvoicespringfeign.model.ContactPUT;
import com.example.smallinvoicespringfeign.model.ContactPeoplePOST;
import com.example.smallinvoicespringfeign.model.ContactPeoplePUT;
import com.example.smallinvoicespringfeign.model.ContactReminderPOST;
import com.example.smallinvoicespringfeign.model.ContactReminderPUT;
import com.example.smallinvoicespringfeign.model.DocumentLetterChangeStatusPATCH;
import com.example.smallinvoicespringfeign.model.DocumentLetterPOST;
import com.example.smallinvoicespringfeign.model.DocumentLetterPUT;
import com.example.smallinvoicespringfeign.model.DocumentLetterSendByEmailPATCH;
import com.example.smallinvoicespringfeign.model.DocumentSendByPostPATCH;
import com.example.smallinvoicespringfeign.model.ItemContactAccountGET;
import com.example.smallinvoicespringfeign.model.ItemContactAddressGET;
import com.example.smallinvoicespringfeign.model.ItemContactConfigurationGroupGET;
import com.example.smallinvoicespringfeign.model.ItemContactGET;
import com.example.smallinvoicespringfeign.model.ItemContactPeopleGET;
import com.example.smallinvoicespringfeign.model.ItemContactReminderGET;
import com.example.smallinvoicespringfeign.model.ItemDocumentLetterGET;
import com.example.smallinvoicespringfeign.model.ListContactAccounts;
import com.example.smallinvoicespringfeign.model.ListContactAddresses;
import com.example.smallinvoicespringfeign.model.ListContactConfigurationGroups;
import com.example.smallinvoicespringfeign.model.ListContactPeople;
import com.example.smallinvoicespringfeign.model.ListContactReminders;
import com.example.smallinvoicespringfeign.model.ListContacts;
import com.example.smallinvoicespringfeign.model.ListLetters;
import com.example.smallinvoicespringfeign.model.Response401;
import com.example.smallinvoicespringfeign.model.Response402;
import com.example.smallinvoicespringfeign.model.Response403;
import com.example.smallinvoicespringfeign.model.Response404;
import com.example.smallinvoicespringfeign.model.Response422;
import com.example.smallinvoicespringfeign.model.Response4xx;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-09T09:40:26.748128+01:00[Europe/Zurich]")
@Validated
@Api(value = "Contacts", description = "the Contacts API")
public interface ContactsApi {

    /**
     * PATCH /contacts/{contactId}/assign-groups/{groupsIds} : Assigns groups to specified contact
     * Assigns groups to specified contact
     *
     * @param contactId contact ID (required)
     * @param groupsIds groups IDs (comma separated) (required)
     * @return Data of the changed contact (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Assigns groups to specified contact", nickname = "assignContactGroups", notes = "Assigns groups to specified contact", response = ItemContactGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed contact", response = ItemContactGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/contacts/{contactId}/assign-groups/{groupsIds}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactGET> assignContactGroups(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "groups IDs (comma separated)",required=true) @PathVariable("groupsIds") String... groupsIds);


    /**
     * PATCH /contacts/letters/{letterId}/change-status : Changes status of specified letter
     * Changes status of specified letter
     *
     * @param letterId letter ID (required)
     * @param documentLetterChangeStatusPATCH change status JSON data (required)
     * @return Data of the changed letter (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Changes status of specified letter", nickname = "changeLetterStatus", notes = "Changes status of specified letter", response = ItemDocumentLetterGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed letter", response = ItemDocumentLetterGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/contacts/letters/{letterId}/change-status",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentLetterGET> changeLetterStatus(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "change status JSON data" ,required=true )  @Valid @RequestBody DocumentLetterChangeStatusPATCH documentLetterChangeStatusPATCH);


    /**
     * POST /contacts : Creates new contact
     * Creates new contact
     *
     * @param contactPOST contact JSON data (required)
     * @return Data of the created contact (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new contact", nickname = "createContact", notes = "Creates new contact", response = ItemContactGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created contact", response = ItemContactGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts",
        produces = "application/json"
    )
    ResponseEntity<ItemContactGET> createContact(@ApiParam(value = "contact JSON data" ,required=true )  @Valid @RequestBody ContactPOST contactPOST);


    /**
     * POST /contacts/{contactId}/accounts : Creates new account for specified contact
     * Creates new account for specified contact
     *
     * @param contactId contact ID (required)
     * @param contactAccountPOST account JSON data (required)
     * @return Data of the created account (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new account for specified contact", nickname = "createContactAccount", notes = "Creates new account for specified contact", response = ItemContactAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created account", response = ItemContactAccountGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/{contactId}/accounts",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAccountGET> createContactAccount(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "account JSON data" ,required=true )  @Valid @RequestBody ContactAccountPOST contactAccountPOST);


    /**
     * POST /contacts/{contactId}/addresses : Creates new address for specified contact
     * Creates new address for specified contact
     *
     * @param contactId contact ID (required)
     * @param contactAddressPOST address JSON data (required)
     * @return Data of the created address (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new address for specified contact", nickname = "createContactAddress", notes = "Creates new address for specified contact", response = ItemContactAddressGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created address", response = ItemContactAddressGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/{contactId}/addresses",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAddressGET> createContactAddress(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "address JSON data" ,required=true )  @Valid @RequestBody ContactAddressPOST contactAddressPOST);


    /**
     * POST /contacts/configuration/groups : Creates new contact group
     * Creates new contact group
     *
     * @param contactConfigurationGroupPOST group JSON data (required)
     * @return Data of the created contact group (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new contact group", nickname = "createContactGroup", notes = "Creates new contact group", response = ItemContactConfigurationGroupGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created contact group", response = ItemContactConfigurationGroupGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/configuration/groups",
        produces = "application/json"
    )
    ResponseEntity<ItemContactConfigurationGroupGET> createContactGroup(@ApiParam(value = "group JSON data" ,required=true )  @Valid @RequestBody ContactConfigurationGroupPOST contactConfigurationGroupPOST);


    /**
     * POST /contacts/{contactId}/people : Creates new person for specified contact
     * Creates new person for specified contact
     *
     * @param contactId contact ID (required)
     * @param contactPeoplePOST person JSON data (required)
     * @return Data of the created person (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new person for specified contact", nickname = "createContactPeople", notes = "Creates new person for specified contact", response = ItemContactPeopleGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created person", response = ItemContactPeopleGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/{contactId}/people",
        produces = "application/json"
    )
    ResponseEntity<ItemContactPeopleGET> createContactPeople(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "person JSON data" ,required=true )  @Valid @RequestBody ContactPeoplePOST contactPeoplePOST);


    /**
     * POST /contacts/letters : Creates new letter
     * Creates new letter
     *
     * @param documentLetterPOST letter JSON data (required)
     * @return Data of the created letter (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or One of feature limits was reached (status code 402)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new letter", nickname = "createLetter", notes = "Creates new letter", response = ItemDocumentLetterGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created letter", response = ItemDocumentLetterGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 402, message = "One of feature limits was reached", response = Response402.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/letters",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentLetterGET> createLetter(@ApiParam(value = "letter JSON data" ,required=true )  @Valid @RequestBody DocumentLetterPOST documentLetterPOST);


    /**
     * POST /contacts/reminders : Creates new reminder
     * Creates new reminder
     *
     * @param contactReminderPOST reminder JSON data (required)
     * @return Data of the created reminder (status code 201)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new reminder", nickname = "createReminder", notes = "Creates new reminder", response = ItemContactReminderGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
             })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created reminder", response = ItemContactReminderGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/contacts/reminders",
        produces = "application/json"
    )
    ResponseEntity<ItemContactReminderGET> createReminder(@ApiParam(value = "reminder JSON data" ,required=true )  @Valid @RequestBody ContactReminderPOST contactReminderPOST);


    /**
     * DELETE /contacts/{contactId}/accounts/{accountsIds} : Deletes specified accounts
     * Deletes specified contact&#39;s accounts
     *
     * @param contactId contact ID (required)
     * @param accountsIds accounts IDs (comma separated) (required)
     * @return Account successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified accounts", nickname = "deleteContactAccount", notes = "Deletes specified contact's accounts", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Account successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/{contactId}/accounts/{accountsIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteContactAccount(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "accounts IDs (comma separated)",required=true) @PathVariable("accountsIds") Integer... accountsIds);


    /**
     * DELETE /contacts/{contactId}/addresses/{addressesIds} : Deletes specified addresses
     * Deletes specified contact&#39;s addresses
     *
     * @param contactId contact ID (required)
     * @param addressesIds addresses IDs (comma separated) (required)
     * @return Address successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified addresses", nickname = "deleteContactAddresses", notes = "Deletes specified contact's addresses", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Address successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/{contactId}/addresses/{addressesIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteContactAddresses(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "addresses IDs (comma separated)",required=true) @PathVariable("addressesIds") Integer... addressesIds);


    /**
     * DELETE /contacts/configuration/groups/{groupsIds} : Deletes specified groups
     * Deletes specified groups
     *
     * @param groupsIds groups IDs (comma separated) (required)
     * @return Account successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified groups", nickname = "deleteContactGroups", notes = "Deletes specified groups", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Account successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/configuration/groups/{groupsIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteContactGroups(@ApiParam(value = "groups IDs (comma separated)",required=true) @PathVariable("groupsIds") Integer... groupsIds);


    /**
     * DELETE /contacts/{contactId}/people/{peopleIds} : Deletes specified people
     * Deletes specified contact&#39;s people
     *
     * @param contactId contact ID (required)
     * @param peopleIds people IDs (comma separated) (required)
     * @return People successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified people", nickname = "deleteContactPeople", notes = "Deletes specified contact's people", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "People successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/{contactId}/people/{peopleIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteContactPeople(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "people IDs (comma separated)",required=true) @PathVariable("peopleIds") String... peopleIds);


    /**
     * DELETE /contacts/{contactIds} : Deletes specified contacts
     * Deletes specified contacts
     *
     * @param contactIds comma separated contact IDs (required)
     * @return Contacts successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified contacts", nickname = "deleteContacts", notes = "Deletes specified contacts", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Contacts successfully deleted"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/{contactIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteContacts(@ApiParam(value = "comma separated contact IDs",required=true) @PathVariable("contactIds") Integer... contactIds);


    /**
     * DELETE /contacts/letters/{letterIds} : Deletes specified letters
     * Deletes specified letters
     *
     * @param letterIds comma separated letter IDs (required)
     * @return Letters successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified letters", nickname = "deleteLetters", notes = "Deletes specified letters", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Letters successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/letters/{letterIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteLetters(@ApiParam(value = "comma separated letter IDs",required=true) @PathVariable("letterIds") Integer... letterIds);


    /**
     * DELETE /contacts/reminders/{reminderIds} : Deletes reminders
     * Deletes specified reminders
     *
     * @param reminderIds reminders IDs (comma separated) (required)
     * @return Reminders successfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes reminders", nickname = "deleteReminders", notes = "Deletes specified reminders", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
             })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Reminders successfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/contacts/reminders/{reminderIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteReminders(@ApiParam(value = "reminders IDs (comma separated)",required=true) @PathVariable("reminderIds") String... reminderIds);


    /**
     * GET /contacts/{contactId} : Returns data of specified contact
     * Returns data of specified contact
     *
     * @param contactId contact ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested contact (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified contact", nickname = "getContact", notes = "Returns data of specified contact", response = ItemContactGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested contact", response = ItemContactGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactGET> getContact(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/{contactId}/accounts/{accountId} : Returns data of specified account
     * Returns data of specified contact&#39;s account
     *
     * @param contactId contact ID (required)
     * @param accountId account ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested account (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified account", nickname = "getContactAccount", notes = "Returns data of specified contact's account", response = ItemContactAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested account", response = ItemContactAccountGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/accounts/{accountId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAccountGET> getContactAccount(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "account ID",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/{contactId}/accounts : Returns list of accounts for specified contact
     * Returns list of accounts for specified contact
     *
     * @param contactId contact ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to description)
     * @return Data of the requested accounts + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of accounts for specified contact", nickname = "getContactAccounts", notes = "Returns list of accounts for specified contact", response = ListContactAccounts.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested accounts + pagination", response = ListContactAccounts.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/accounts",
        produces = "application/json"
    )
    ResponseEntity<ListContactAccounts> getContactAccounts(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "description") @Valid @RequestParam(value = "sort", required = false, defaultValue="description") String sort);


    /**
     * GET /contacts/{contactId}/addresses/{addressId} : Returns data of specified address
     * Returns data of specified contact&#39;s address
     *
     * @param contactId contact ID (required)
     * @param addressId address ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested address (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified address", nickname = "getContactAddress", notes = "Returns data of specified contact's address", response = ItemContactAddressGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested address", response = ItemContactAddressGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/addresses/{addressId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAddressGET> getContactAddress(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "address ID",required=true) @PathVariable("addressId") Integer addressId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/{contactId}/addresses : Returns list of addresses for specified contact
     * Returns list of addresses for specified contact
     *
     * @param contactId contact ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to street)
     * @return Data of the requested addresses + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of addresses for specified contact", nickname = "getContactAddresses", notes = "Returns list of addresses for specified contact", response = ListContactAddresses.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested addresses + pagination", response = ListContactAddresses.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/addresses",
        produces = "application/json"
    )
    ResponseEntity<ListContactAddresses> getContactAddresses(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "street") @Valid @RequestParam(value = "sort", required = false, defaultValue="street") String sort);


    /**
     * GET /contacts/configuration/groups/{groupId} : Returns data of specified contact group
     * Returns data of specified contact group
     *
     * @param groupId group ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested contact group (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified contact group", nickname = "getContactGroup", notes = "Returns data of specified contact group", response = ItemContactConfigurationGroupGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested contact group", response = ItemContactConfigurationGroupGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/configuration/groups/{groupId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactConfigurationGroupGET> getContactGroup(@ApiParam(value = "group ID",required=true) @PathVariable("groupId") Integer groupId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/configuration/groups : Returns list of contact groups
     * Returns list of contact groups
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested contact groups + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of contact groups", nickname = "getContactGroups", notes = "Returns list of contact groups", response = ListContactConfigurationGroups.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested contact groups + pagination", response = ListContactConfigurationGroups.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/configuration/groups",
        produces = "application/json"
    )
    ResponseEntity<ListContactConfigurationGroups> getContactGroups(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /contacts/{contactId}/people/{personId} : Returns data of specified person
     * Returns data of specified contact&#39;s person
     *
     * @param contactId contact ID (required)
     * @param personId person ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested person (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified person", nickname = "getContactPeople", notes = "Returns data of specified contact's person", response = ItemContactPeopleGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested person", response = ItemContactPeopleGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/people/{personId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactPeopleGET> getContactPeople(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "person ID",required=true) @PathVariable("personId") Integer personId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/{contactId}/people : Returns list of people for specified contact
     * Returns list of people for specified contact
     *
     * @param contactId contact ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to surname)
     * @return Data of the requested people + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of people for specified contact", nickname = "getContactPeoples", notes = "Returns list of people for specified contact", response = ListContactPeople.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested people + pagination", response = ListContactPeople.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/{contactId}/people",
        produces = "application/json"
    )
    ResponseEntity<ListContactPeople> getContactPeoples(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "surname") @Valid @RequestParam(value = "sort", required = false, defaultValue="surname") String sort);


    /**
     * GET /contacts : Returns list of contacts
     * Returns list of contacts
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested contacts + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of contacts", nickname = "getContacts", notes = "Returns list of contacts", response = ListContacts.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested contacts + pagination", response = ListContacts.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts",
        produces = "application/json"
    )
    ResponseEntity<ListContacts> getContacts(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /contacts/letters/{letterId} : Returns data of specified letter
     * Returns data of specified letter
     *
     * @param letterId letter ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested letter (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified letter", nickname = "getLetter", notes = "Returns data of specified letter", response = ItemDocumentLetterGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested letter", response = ItemDocumentLetterGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/letters/{letterId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentLetterGET> getLetter(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/letters/{letterId}/pdf : Gets pdf of specified letter
     * Gets pdf of specified letter
     *
     * @param letterId letter ID (required)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets pdf of specified letter", nickname = "getLetterPdf", notes = "Gets pdf of specified letter", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/letters/{letterId}/pdf",
        produces = "application/pdf"
    )
    ResponseEntity<org.springframework.core.io.Resource> getLetterPdf(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId);


    /**
     * GET /contacts/letters/{letterId}/preview : Gets preview of specified letter
     * Gets preview of specified letter
     *
     * @param letterId letter ID (required)
     * @param page page number [1 .. pages amount] (optional, default to 1)
     * @param size width in pixels (optional, default to 972)
     * @return ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Gets preview of specified letter", nickname = "getLetterPreview", notes = "Gets preview of specified letter", response = org.springframework.core.io.Resource.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = org.springframework.core.io.Resource.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/letters/{letterId}/preview",
        produces = "image/png"
    )
    ResponseEntity<org.springframework.core.io.Resource> getLetterPreview(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "page number [1 .. pages amount]", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "width in pixels", allowableValues = "240, 595, 600, 972, 1240", defaultValue = "972") @Valid @RequestParam(value = "size", required = false, defaultValue="972") Integer size);


    /**
     * GET /contacts/letters : Returns list of letters
     * Returns list of letters
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to title)
     * @return Data of the requested letters + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of letters", nickname = "getLetters", notes = "Returns list of letters", response = ListLetters.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested letters + pagination", response = ListLetters.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/letters",
        produces = "application/json"
    )
    ResponseEntity<ListLetters> getLetters(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "title") @Valid @RequestParam(value = "sort", required = false, defaultValue="title") String sort);


    /**
     * GET /contacts/reminders/{reminderId} : Returns data of specified reminder
     * Returns data of specified reminder
     *
     * @param reminderId reminder ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested reminder (status code 200)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified reminder", nickname = "getReminder", notes = "Returns data of specified reminder", response = ItemContactReminderGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
             })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested reminder", response = ItemContactReminderGET.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/reminders/{reminderId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactReminderGET> getReminder(@ApiParam(value = "reminder ID",required=true) @PathVariable("reminderId") Integer reminderId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /contacts/reminders : Returns list of reminders
     * Returns list of reminders
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to date_time)
     * @return Data of the requested reminders + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of reminders", nickname = "getReminders", notes = "Returns list of reminders", response = ListContactReminders.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
             })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested reminders + pagination", response = ListContactReminders.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/contacts/reminders",
        produces = "application/json"
    )
    ResponseEntity<ListContactReminders> getReminders(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "date_time") @Valid @RequestParam(value = "sort", required = false, defaultValue="date_time") String sort);


    /**
     * PATCH /contacts/{contactId}/remove-groups/{groupsIds} : Removes groups from specified contact
     * Removes groups from specified contact
     *
     * @param contactId contact ID (required)
     * @param groupsIds groups IDs (comma separated) (required)
     * @return Data of the changed contact (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Removes groups from specified contact", nickname = "removeContactGroups", notes = "Removes groups from specified contact", response = ItemContactGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the changed contact", response = ItemContactGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/contacts/{contactId}/remove-groups/{groupsIds}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactGET> removeContactGroups(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "groups IDs (comma separated)",required=true) @PathVariable("groupsIds") String... groupsIds);


    /**
     * PATCH /contacts/letters/{letterId}/send-by-email : Sends specified letter by email
     * Sends specified letter by email
     *
     * @param letterId letter ID (required)
     * @param documentLetterSendByEmailPATCH sending JSON data (required)
     * @return Letter successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified letter by email", nickname = "sendLetterByEMail", notes = "Sends specified letter by email", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Letter successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/contacts/letters/{letterId}/send-by-email",
        produces = "application/json"
    )
    ResponseEntity<Void> sendLetterByEMail(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentLetterSendByEmailPATCH documentLetterSendByEmailPATCH);


    /**
     * PATCH /contacts/letters/{letterId}/send-by-post : Sends specified letter by post
     * Sends specified letter by post
     *
     * @param letterId letter ID (required)
     * @param documentSendByPostPATCH sending JSON data (required)
     * @return Letter successfully sent (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Sends specified letter by post", nickname = "sendLetterByPost", notes = "Sends specified letter by post", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Letter successfully sent"),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PatchMapping(
        value = "/contacts/letters/{letterId}/send-by-post",
        produces = "application/json"
    )
    ResponseEntity<Void> sendLetterByPost(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "sending JSON data" ,required=true )  @Valid @RequestBody DocumentSendByPostPATCH documentSendByPostPATCH);


    /**
     * PUT /contacts/{contactId} : Updates specified contact
     * Updates specified contact
     *
     * @param contactId contact ID (required)
     * @param contactPUT contact JSON data (required)
     * @return Data of the updated contact (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified contact", nickname = "updateContact", notes = "Updates specified contact", response = ItemContactGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated contact", response = ItemContactGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/{contactId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactGET> updateContact(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "contact JSON data" ,required=true )  @Valid @RequestBody ContactPUT contactPUT);


    /**
     * PUT /contacts/{contactId}/accounts/{accountId} : Updates specified account
     * Updates specified contact&#39;s account
     *
     * @param contactId contact ID (required)
     * @param accountId account ID (required)
     * @param contactAccountPUT account JSON data (required)
     * @return Data of the updated account (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified account", nickname = "updateContactAccount", notes = "Updates specified contact's account", response = ItemContactAccountGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated account", response = ItemContactAccountGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/{contactId}/accounts/{accountId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAccountGET> updateContactAccount(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "account ID",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "account JSON data" ,required=true )  @Valid @RequestBody ContactAccountPUT contactAccountPUT);


    /**
     * PUT /contacts/{contactId}/addresses/{addressId} : Updates specified address
     * Updates specified contact&#39;s address
     *
     * @param contactId contact ID (required)
     * @param addressId address ID (required)
     * @param contactAddressPUT address JSON data (required)
     * @return Data of the updated address (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified address", nickname = "updateContactAddress", notes = "Updates specified contact's address", response = ItemContactAddressGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated address", response = ItemContactAddressGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/{contactId}/addresses/{addressId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactAddressGET> updateContactAddress(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "address ID",required=true) @PathVariable("addressId") Integer addressId,@ApiParam(value = "address JSON data" ,required=true )  @Valid @RequestBody ContactAddressPUT contactAddressPUT);


    /**
     * PUT /contacts/configuration/groups/{groupId} : Updates specified group
     * Updates specified group
     *
     * @param groupId group ID (required)
     * @param contactConfigurationGroupPUT group JSON data (required)
     * @return Data of the updated group (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified group", nickname = "updateContactGroup", notes = "Updates specified group", response = ItemContactConfigurationGroupGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated group", response = ItemContactConfigurationGroupGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/configuration/groups/{groupId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactConfigurationGroupGET> updateContactGroup(@ApiParam(value = "group ID",required=true) @PathVariable("groupId") Integer groupId,@ApiParam(value = "group JSON data" ,required=true )  @Valid @RequestBody ContactConfigurationGroupPUT contactConfigurationGroupPUT);


    /**
     * PUT /contacts/{contactId}/people/{personId} : Updates specified person
     * Updates specified contact&#39;s person
     *
     * @param contactId contact ID (required)
     * @param personId person ID (required)
     * @param contactPeoplePUT person JSON data (required)
     * @return Data of the updated person (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified person", nickname = "updateContactPeople", notes = "Updates specified contact's person", response = ItemContactPeopleGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "contact", description = "Contacts") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated person", response = ItemContactPeopleGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/{contactId}/people/{personId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactPeopleGET> updateContactPeople(@ApiParam(value = "contact ID",required=true) @PathVariable("contactId") Integer contactId,@ApiParam(value = "person ID",required=true) @PathVariable("personId") Integer personId,@ApiParam(value = "person JSON data" ,required=true )  @Valid @RequestBody ContactPeoplePUT contactPeoplePUT);


    /**
     * PUT /contacts/letters/{letterId} : Updates specified letter
     * Updates specified letter
     *
     * @param letterId letter ID (required)
     * @param documentLetterPUT letter JSON data (required)
     * @return Data of the updated letter (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified letter", nickname = "updateLetter", notes = "Updates specified letter", response = ItemDocumentLetterGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "letter", description = "Letters") })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated letter", response = ItemDocumentLetterGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/letters/{letterId}",
        produces = "application/json"
    )
    ResponseEntity<ItemDocumentLetterGET> updateLetter(@ApiParam(value = "letter ID",required=true) @PathVariable("letterId") Integer letterId,@ApiParam(value = "letter JSON data" ,required=true )  @Valid @RequestBody DocumentLetterPUT documentLetterPUT);


    /**
     * PUT /contacts/reminders/{reminderId} : Updates specified reminder
     * Updates specified reminder
     *
     * @param reminderId reminder ID (required)
     * @param contactReminderPUT reminder JSON data (required)
     * @return Data of the updated reminder (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified reminder", nickname = "updateReminder", notes = "Updates specified reminder", response = ItemContactReminderGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
             })
         }, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated reminder", response = ItemContactReminderGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/contacts/reminders/{reminderId}",
        produces = "application/json"
    )
    ResponseEntity<ItemContactReminderGET> updateReminder(@ApiParam(value = "reminder ID",required=true) @PathVariable("reminderId") Integer reminderId,@ApiParam(value = "reminder JSON data" ,required=true )  @Valid @RequestBody ContactReminderPUT contactReminderPUT);

}
