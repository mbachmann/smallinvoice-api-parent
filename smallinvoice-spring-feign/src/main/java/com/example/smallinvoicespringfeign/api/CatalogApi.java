/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.smallinvoicespringfeign.api;

import com.example.smallinvoicespringfeign.model.CatalogCategoryPOST;
import com.example.smallinvoicespringfeign.model.CatalogCategoryPUT;
import com.example.smallinvoicespringfeign.model.CatalogProductPOST;
import com.example.smallinvoicespringfeign.model.CatalogProductPUT;
import com.example.smallinvoicespringfeign.model.CatalogServicePOST;
import com.example.smallinvoicespringfeign.model.CatalogServicePUT;
import com.example.smallinvoicespringfeign.model.ItemCatalogCategoryGET;
import com.example.smallinvoicespringfeign.model.ItemCatalogConfigurationUnitGET;
import com.example.smallinvoicespringfeign.model.ItemCatalogProductGET;
import com.example.smallinvoicespringfeign.model.ItemCatalogServiceGET;
import com.example.smallinvoicespringfeign.model.ListCatalogConfigurationUnits;
import com.example.smallinvoicespringfeign.model.ListProducts;
import com.example.smallinvoicespringfeign.model.ListProductsCategories;
import com.example.smallinvoicespringfeign.model.ListServices;
import com.example.smallinvoicespringfeign.model.ListServicesCategories;
import com.example.smallinvoicespringfeign.model.Response401;
import com.example.smallinvoicespringfeign.model.Response403;
import com.example.smallinvoicespringfeign.model.Response404;
import com.example.smallinvoicespringfeign.model.Response422;
import com.example.smallinvoicespringfeign.model.Response4xx;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-09T09:40:26.748128+01:00[Europe/Zurich]")
@Validated
@Api(value = "Catalog", description = "the Catalog API")
public interface CatalogApi {

    /**
     * POST /catalog/products : Creates new product
     * Creates new product
     *
     * @param catalogProductPOST product JSON data (required)
     * @return Data of the created product (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new product", nickname = "createCatalogProduct", notes = "Creates new product", response = ItemCatalogProductGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created product", response = ItemCatalogProductGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/catalog/products",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogProductGET> createCatalogProduct(@ApiParam(value = "product JSON data" ,required=true )  @Valid @RequestBody CatalogProductPOST catalogProductPOST);


    /**
     * POST /catalog/products/categories : Creates new product category
     * Creates new product category
     *
     * @param catalogCategoryPOST category JSON data (required)
     * @return Data of the created product category (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new product category", nickname = "createCatalogProductCategory", notes = "Creates new product category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created product category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/catalog/products/categories",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> createCatalogProductCategory(@ApiParam(value = "category JSON data" ,required=true )  @Valid @RequestBody CatalogCategoryPOST catalogCategoryPOST);


    /**
     * POST /catalog/services : Creates new service
     * Creates new service
     *
     * @param catalogServicePOST service JSON data (required)
     * @return Data of the created service (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new service", nickname = "createCatalogService", notes = "Creates new service", response = ItemCatalogServiceGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created service", response = ItemCatalogServiceGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/catalog/services",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogServiceGET> createCatalogService(@ApiParam(value = "service JSON data" ,required=true )  @Valid @RequestBody CatalogServicePOST catalogServicePOST);


    /**
     * POST /catalog/services/categories : Creates new service category
     * Creates new service category
     *
     * @param catalogCategoryPOST category JSON data (required)
     * @return Data of the created service category (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Creates new service category", nickname = "createCatalogServiceCategory", notes = "Creates new service category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Data of the created service category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PostMapping(
        value = "/catalog/services/categories",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> createCatalogServiceCategory(@ApiParam(value = "category JSON data" ,required=true )  @Valid @RequestBody CatalogCategoryPOST catalogCategoryPOST);


    /**
     * DELETE /catalog/products/categories/{categoryIds} : Deletes specified product categories
     * Deletes specified product categories
     *
     * @param categoryIds comma separated category IDs (required)
     * @return Categories successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified product categories", nickname = "deleteCatalogProductCategories", notes = "Deletes specified product categories", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Categories successfully deleted"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/catalog/products/categories/{categoryIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCatalogProductCategories(@ApiParam(value = "comma separated category IDs",required=true) @PathVariable("categoryIds") Integer... categoryIds);


    /**
     * DELETE /catalog/products/{productIds} : Deletes specified products
     * Deletes specified products
     *
     * @param productIds comma separated product IDs (required)
     * @return Products successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified products", nickname = "deleteCatalogProducts", notes = "Deletes specified products", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Products successfully deleted"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/catalog/products/{productIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCatalogProducts(@ApiParam(value = "comma separated product IDs",required=true) @PathVariable("productIds") Integer... productIds);


    /**
     * DELETE /catalog/services/categories/{categoryIds} : Deletes specified service categories
     * Deletes specified service categories
     *
     * @param categoryIds comma separated category IDs (required)
     * @return Categories successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified service categories", nickname = "deleteCatalogServiceCategories", notes = "Deletes specified service categories", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Categories successfully deleted"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/catalog/services/categories/{categoryIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCatalogServiceCategories(@ApiParam(value = "comma separated category IDs",required=true) @PathVariable("categoryIds") Integer... categoryIds);


    /**
     * DELETE /catalog/services/{serviceIds} : Deletes specified services
     * Deletes specified services
     *
     * @param serviceIds comma separated service IDs (required)
     * @return Services successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Deletes specified services", nickname = "deleteCatalogServices", notes = "Deletes specified services", authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Services successfully deleted"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @DeleteMapping(
        value = "/catalog/services/{serviceIds}",
        produces = "application/json"
    )
    ResponseEntity<Void> deleteCatalogServices(@ApiParam(value = "comma separated service IDs",required=true) @PathVariable("serviceIds") Integer... serviceIds);


    /**
     * GET /catalog/products/{productId} : Returns data of specified product
     * Returns data of specified product
     *
     * @param productId product ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested product (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified product", nickname = "getCatalogProduct", notes = "Returns data of specified product", response = ItemCatalogProductGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested product", response = ItemCatalogProductGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/products/{productId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogProductGET> getCatalogProduct(@ApiParam(value = "product ID",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /catalog/products/categories : Returns list of product categories
     * Returns list of product categories
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested product categories + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of product categories", nickname = "getCatalogProductCategories", notes = "Returns list of product categories", response = ListProductsCategories.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested product categories + pagination", response = ListProductsCategories.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/products/categories",
        produces = "application/json"
    )
    ResponseEntity<ListProductsCategories> getCatalogProductCategories(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /catalog/products/categories/{categoryId} : Returns data of specified product category
     * Returns data of specified product category
     *
     * @param categoryId category ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested product category (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified product category", nickname = "getCatalogProductCategory", notes = "Returns data of specified product category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested product category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/products/categories/{categoryId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> getCatalogProductCategory(@ApiParam(value = "category ID",required=true) @PathVariable("categoryId") Integer categoryId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /catalog/products : Returns list of products
     * Returns list of products
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested products + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of products", nickname = "getCatalogProducts", notes = "Returns list of products", response = ListProducts.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested products + pagination", response = ListProducts.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/products",
        produces = "application/json"
    )
    ResponseEntity<ListProducts> getCatalogProducts(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /catalog/services/{serviceId} : Returns data of specified service
     * Returns data of specified service
     *
     * @param serviceId service ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested service (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified service", nickname = "getCatalogService", notes = "Returns data of specified service", response = ItemCatalogServiceGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested service", response = ItemCatalogServiceGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/services/{serviceId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogServiceGET> getCatalogService(@ApiParam(value = "service ID",required=true) @PathVariable("serviceId") Integer serviceId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /catalog/services/categories : Returns list of service categories
     * Returns list of service categories
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested service categories + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of service categories", nickname = "getCatalogServiceCategories", notes = "Returns list of service categories", response = ListServicesCategories.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested service categories + pagination", response = ListServicesCategories.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/services/categories",
        produces = "application/json"
    )
    ResponseEntity<ListServicesCategories> getCatalogServiceCategories(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /catalog/services/categories/{categoryId} : Returns data of specified service category
     * Returns data of specified service category
     *
     * @param categoryId category ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested service category (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified service category", nickname = "getCatalogServiceCategory", notes = "Returns data of specified service category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested service category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/services/categories/{categoryId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> getCatalogServiceCategory(@ApiParam(value = "category ID",required=true) @PathVariable("categoryId") Integer categoryId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /catalog/services : Returns list of services
     * Returns list of services
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to name)
     * @return Data of the requested services + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of services", nickname = "getCatalogServices", notes = "Returns list of services", response = ListServices.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested services + pagination", response = ListServices.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/services",
        produces = "application/json"
    )
    ResponseEntity<ListServices> getCatalogServices(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "name") @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort);


    /**
     * GET /catalog/configuration/units/{unitId} : Returns data of specified unit
     * Returns data of specified unit
     *
     * @param unitId unit ID (required)
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @return Data of the requested unit (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns data of specified unit", nickname = "getUnit", notes = "Returns data of specified unit", response = ItemCatalogConfigurationUnitGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested unit", response = ItemCatalogConfigurationUnitGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/configuration/units/{unitId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogConfigurationUnitGET> getUnit(@ApiParam(value = "unit ID",required=true) @PathVariable("unitId") Integer unitId,@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with);


    /**
     * GET /catalog/configuration/units : Returns list of units
     * Returns list of units
     *
     * @param with Comma separated, optional keys that should be included in the response. (optional)
     * @param q Value for full text search (optional)
     * @param filter Filter expression (JSON) (optional)
     * @param limit Limits the number of items returned. Number in a range [1-200] (optional, default to 100)
     * @param offset Offset of the first item to return. The offset of the initial item is 0.  (optional, default to 0)
     * @param sort Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending. (optional, default to custom,name)
     * @return Data of the requested unit types + pagination (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Method not allowed (status code 405)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Returns list of units", nickname = "getUnits", notes = "Returns list of units", response = ListCatalogConfigurationUnits.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the requested unit types + pagination", response = ListCatalogConfigurationUnits.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/catalog/configuration/units",
        produces = "application/json"
    )
    ResponseEntity<ListCatalogConfigurationUnits> getUnits(@ApiParam(value = "Comma separated, optional keys that should be included in the response.") @Valid @RequestParam(value = "with", required = false) String with,@ApiParam(value = "Value for full text search") @Valid @RequestParam(value = "q", required = false) String q,@ApiParam(value = "Filter expression (JSON)") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Limits the number of items returned. Number in a range [1-200]", defaultValue = "100") @Valid @RequestParam(value = "limit", required = false, defaultValue="100") Integer limit,@ApiParam(value = "Offset of the first item to return. The offset of the initial item is 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sorting expression. Key or comma separated keys. Key preceded with minus (-) means descending.", defaultValue = "custom,name") @Valid @RequestParam(value = "sort", required = false, defaultValue="custom,name") String sort);


    /**
     * PUT /catalog/products/{productId} : Updates specified product
     * Updates specified product
     *
     * @param productId product ID (required)
     * @param catalogProductPUT product JSON data (required)
     * @return Data of the updated product (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified product", nickname = "updateCatalogProduct", notes = "Updates specified product", response = ItemCatalogProductGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated product", response = ItemCatalogProductGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/catalog/products/{productId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogProductGET> updateCatalogProduct(@ApiParam(value = "product ID",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "product JSON data" ,required=true )  @Valid @RequestBody CatalogProductPUT catalogProductPUT);


    /**
     * PUT /catalog/products/categories/{categoryId} : Updates specified product category
     * Updates specified product category
     *
     * @param categoryId category ID (required)
     * @param catalogCategoryPUT category JSON data (required)
     * @return Data of the updated product category (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified product category", nickname = "updateCatalogProductCategory", notes = "Updates specified product category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated product category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/catalog/products/categories/{categoryId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> updateCatalogProductCategory(@ApiParam(value = "category ID",required=true) @PathVariable("categoryId") Integer categoryId,@ApiParam(value = "category JSON data" ,required=true )  @Valid @RequestBody CatalogCategoryPUT catalogCategoryPUT);


    /**
     * PUT /catalog/services/{serviceId} : Updates specified service
     * Updates specified service
     *
     * @param serviceId service ID (required)
     * @param catalogServicePUT service JSON data (required)
     * @return Data of the updated service (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified service", nickname = "updateCatalogService", notes = "Updates specified service", response = ItemCatalogServiceGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated service", response = ItemCatalogServiceGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/catalog/services/{serviceId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogServiceGET> updateCatalogService(@ApiParam(value = "service ID",required=true) @PathVariable("serviceId") Integer serviceId,@ApiParam(value = "service JSON data" ,required=true )  @Valid @RequestBody CatalogServicePUT catalogServicePUT);


    /**
     * PUT /catalog/services/categories/{categoryId} : Updates specified service category
     * Updates specified service category
     *
     * @param categoryId category ID (required)
     * @param catalogCategoryPUT category JSON data (required)
     * @return Data of the updated service category (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or No permissions for specified entity (no response body) OR feature is missing (with response body) (status code 403)
     *         or Entity not found (status code 404)
     *         or Method not allowed (status code 405)
     *         or Validation errors (status code 422)
     *         or Too many requests (status code 429)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Updates specified service category", nickname = "updateCatalogServiceCategory", notes = "Updates specified service category", response = ItemCatalogCategoryGET.class, authorizations = {
        
        @Authorization(value = "bearerAuth"),
        @Authorization(value = "oauth", scopes = {
            @AuthorizationScope(scope = "catalog", description = "Catalog") })
         }, tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data of the updated service category", response = ItemCatalogCategoryGET.class),
        @ApiResponse(code = 400, message = "Bad request", response = Response4xx.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Response401.class),
        @ApiResponse(code = 403, message = "No permissions for specified entity (no response body) OR feature is missing (with response body)", response = Response403.class),
        @ApiResponse(code = 404, message = "Entity not found", response = Response404.class),
        @ApiResponse(code = 405, message = "Method not allowed", response = Response4xx.class),
        @ApiResponse(code = 422, message = "Validation errors", response = Response422.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Response4xx.class),
        @ApiResponse(code = 500, message = "Server error") })
    @PutMapping(
        value = "/catalog/services/categories/{categoryId}",
        produces = "application/json"
    )
    ResponseEntity<ItemCatalogCategoryGET> updateCatalogServiceCategory(@ApiParam(value = "category ID",required=true) @PathVariable("categoryId") Integer categoryId,@ApiParam(value = "category JSON data" ,required=true )  @Valid @RequestBody CatalogCategoryPUT catalogCategoryPUT);

}
